// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visitStat.proto

#ifndef PROTOBUF_INCLUDED_visitStat_2eproto
#define PROTOBUF_INCLUDED_visitStat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_visitStat_2eproto 

namespace protobuf_visitStat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_visitStat_2eproto
namespace auth {
class AuthCheck;
class AuthCheckDefaultTypeInternal;
extern AuthCheckDefaultTypeInternal _AuthCheck_default_instance_;
class AuthUser;
class AuthUserDefaultTypeInternal;
extern AuthUserDefaultTypeInternal _AuthUser_default_instance_;
}  // namespace auth
namespace google {
namespace protobuf {
template<> ::auth::AuthCheck* Arena::CreateMaybeMessage<::auth::AuthCheck>(Arena*);
template<> ::auth::AuthUser* Arena::CreateMaybeMessage<::auth::AuthUser>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace auth {

enum AuthUser_System {
  AuthUser_System_LINUX = 0,
  AuthUser_System_MACOS = 1,
  AuthUser_System_WINDOWS = 2
};
bool AuthUser_System_IsValid(int value);
const AuthUser_System AuthUser_System_System_MIN = AuthUser_System_LINUX;
const AuthUser_System AuthUser_System_System_MAX = AuthUser_System_WINDOWS;
const int AuthUser_System_System_ARRAYSIZE = AuthUser_System_System_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthUser_System_descriptor();
inline const ::std::string& AuthUser_System_Name(AuthUser_System value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthUser_System_descriptor(), value);
}
inline bool AuthUser_System_Parse(
    const ::std::string& name, AuthUser_System* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthUser_System>(
    AuthUser_System_descriptor(), name, value);
}
// ===================================================================

class AuthUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.AuthUser) */ {
 public:
  AuthUser();
  virtual ~AuthUser();

  AuthUser(const AuthUser& from);

  inline AuthUser& operator=(const AuthUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthUser(AuthUser&& from) noexcept
    : AuthUser() {
    *this = ::std::move(from);
  }

  inline AuthUser& operator=(AuthUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUser* internal_default_instance() {
    return reinterpret_cast<const AuthUser*>(
               &_AuthUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuthUser* other);
  friend void swap(AuthUser& a, AuthUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthUser* New() const final {
    return CreateMaybeMessage<AuthUser>(NULL);
  }

  AuthUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthUser& from);
  void MergeFrom(const AuthUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthUser_System System;
  static const System LINUX =
    AuthUser_System_LINUX;
  static const System MACOS =
    AuthUser_System_MACOS;
  static const System WINDOWS =
    AuthUser_System_WINDOWS;
  static inline bool System_IsValid(int value) {
    return AuthUser_System_IsValid(value);
  }
  static const System System_MIN =
    AuthUser_System_System_MIN;
  static const System System_MAX =
    AuthUser_System_System_MAX;
  static const int System_ARRAYSIZE =
    AuthUser_System_System_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  System_descriptor() {
    return AuthUser_System_descriptor();
  }
  static inline const ::std::string& System_Name(System value) {
    return AuthUser_System_Name(value);
  }
  static inline bool System_Parse(const ::std::string& name,
      System* value) {
    return AuthUser_System_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string ip = 3;
  int ip_size() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip(int index) const;
  ::std::string* mutable_ip(int index);
  void set_ip(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ip(int index, ::std::string&& value);
  #endif
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  ::std::string* add_ip();
  void add_ip(const ::std::string& value);
  #if LANG_CXX11
  void add_ip(::std::string&& value);
  #endif
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ip() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string browser = 2;
  bool has_browser() const;
  void clear_browser();
  static const int kBrowserFieldNumber = 2;
  const ::std::string& browser() const;
  void set_browser(const ::std::string& value);
  #if LANG_CXX11
  void set_browser(::std::string&& value);
  #endif
  void set_browser(const char* value);
  void set_browser(const char* value, size_t size);
  ::std::string* mutable_browser();
  ::std::string* release_browser();
  void set_allocated_browser(::std::string* browser);

  // optional .auth.AuthUser.System system = 4 [default = LINUX];
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 4;
  ::auth::AuthUser_System system() const;
  void set_system(::auth::AuthUser_System value);

  // @@protoc_insertion_point(class_scope:auth.AuthUser)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_browser();
  void clear_has_browser();
  void set_has_system();
  void clear_has_system();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr browser_;
  int system_;
  friend struct ::protobuf_visitStat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.AuthCheck) */ {
 public:
  AuthCheck();
  virtual ~AuthCheck();

  AuthCheck(const AuthCheck& from);

  inline AuthCheck& operator=(const AuthCheck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthCheck(AuthCheck&& from) noexcept
    : AuthCheck() {
    *this = ::std::move(from);
  }

  inline AuthCheck& operator=(AuthCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthCheck* internal_default_instance() {
    return reinterpret_cast<const AuthCheck*>(
               &_AuthCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthCheck* other);
  friend void swap(AuthCheck& a, AuthCheck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthCheck* New() const final {
    return CreateMaybeMessage<AuthCheck>(NULL);
  }

  AuthCheck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthCheck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthCheck& from);
  void MergeFrom(const AuthCheck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .auth.AuthUser users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::auth::AuthUser* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::auth::AuthUser >*
      mutable_users();
  const ::auth::AuthUser& users(int index) const;
  ::auth::AuthUser* add_users();
  const ::google::protobuf::RepeatedPtrField< ::auth::AuthUser >&
      users() const;

  // @@protoc_insertion_point(class_scope:auth.AuthCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::auth::AuthUser > users_;
  friend struct ::protobuf_visitStat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthUser

// optional string name = 1;
inline bool AuthUser::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthUser::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AuthUser::name() const {
  // @@protoc_insertion_point(field_get:auth.AuthUser.name)
  return name_.GetNoArena();
}
inline void AuthUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.AuthUser.name)
}
#if LANG_CXX11
inline void AuthUser::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthUser.name)
}
#endif
inline void AuthUser::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.AuthUser.name)
}
inline void AuthUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.AuthUser.name)
}
inline ::std::string* AuthUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:auth.AuthUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUser::release_name() {
  // @@protoc_insertion_point(field_release:auth.AuthUser.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:auth.AuthUser.name)
}

// optional string browser = 2;
inline bool AuthUser::has_browser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthUser::set_has_browser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthUser::clear_has_browser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthUser::clear_browser() {
  browser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser();
}
inline const ::std::string& AuthUser::browser() const {
  // @@protoc_insertion_point(field_get:auth.AuthUser.browser)
  return browser_.GetNoArena();
}
inline void AuthUser::set_browser(const ::std::string& value) {
  set_has_browser();
  browser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.AuthUser.browser)
}
#if LANG_CXX11
inline void AuthUser::set_browser(::std::string&& value) {
  set_has_browser();
  browser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthUser.browser)
}
#endif
inline void AuthUser::set_browser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser();
  browser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.AuthUser.browser)
}
inline void AuthUser::set_browser(const char* value, size_t size) {
  set_has_browser();
  browser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.AuthUser.browser)
}
inline ::std::string* AuthUser::mutable_browser() {
  set_has_browser();
  // @@protoc_insertion_point(field_mutable:auth.AuthUser.browser)
  return browser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUser::release_browser() {
  // @@protoc_insertion_point(field_release:auth.AuthUser.browser)
  if (!has_browser()) {
    return NULL;
  }
  clear_has_browser();
  return browser_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUser::set_allocated_browser(::std::string* browser) {
  if (browser != NULL) {
    set_has_browser();
  } else {
    clear_has_browser();
  }
  browser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser);
  // @@protoc_insertion_point(field_set_allocated:auth.AuthUser.browser)
}

// repeated string ip = 3;
inline int AuthUser::ip_size() const {
  return ip_.size();
}
inline void AuthUser::clear_ip() {
  ip_.Clear();
}
inline const ::std::string& AuthUser::ip(int index) const {
  // @@protoc_insertion_point(field_get:auth.AuthUser.ip)
  return ip_.Get(index);
}
inline ::std::string* AuthUser::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:auth.AuthUser.ip)
  return ip_.Mutable(index);
}
inline void AuthUser::set_ip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:auth.AuthUser.ip)
  ip_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuthUser::set_ip(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:auth.AuthUser.ip)
  ip_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuthUser::set_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:auth.AuthUser.ip)
}
inline void AuthUser::set_ip(int index, const char* value, size_t size) {
  ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:auth.AuthUser.ip)
}
inline ::std::string* AuthUser::add_ip() {
  // @@protoc_insertion_point(field_add_mutable:auth.AuthUser.ip)
  return ip_.Add();
}
inline void AuthUser::add_ip(const ::std::string& value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:auth.AuthUser.ip)
}
#if LANG_CXX11
inline void AuthUser::add_ip(::std::string&& value) {
  ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:auth.AuthUser.ip)
}
#endif
inline void AuthUser::add_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:auth.AuthUser.ip)
}
inline void AuthUser::add_ip(const char* value, size_t size) {
  ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:auth.AuthUser.ip)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthUser::ip() const {
  // @@protoc_insertion_point(field_list:auth.AuthUser.ip)
  return ip_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AuthUser::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:auth.AuthUser.ip)
  return &ip_;
}

// optional .auth.AuthUser.System system = 4 [default = LINUX];
inline bool AuthUser::has_system() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthUser::set_has_system() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthUser::clear_has_system() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthUser::clear_system() {
  system_ = 0;
  clear_has_system();
}
inline ::auth::AuthUser_System AuthUser::system() const {
  // @@protoc_insertion_point(field_get:auth.AuthUser.system)
  return static_cast< ::auth::AuthUser_System >(system_);
}
inline void AuthUser::set_system(::auth::AuthUser_System value) {
  assert(::auth::AuthUser_System_IsValid(value));
  set_has_system();
  system_ = value;
  // @@protoc_insertion_point(field_set:auth.AuthUser.system)
}

// -------------------------------------------------------------------

// AuthCheck

// repeated .auth.AuthUser users = 1;
inline int AuthCheck::users_size() const {
  return users_.size();
}
inline void AuthCheck::clear_users() {
  users_.Clear();
}
inline ::auth::AuthUser* AuthCheck::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:auth.AuthCheck.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::auth::AuthUser >*
AuthCheck::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:auth.AuthCheck.users)
  return &users_;
}
inline const ::auth::AuthUser& AuthCheck::users(int index) const {
  // @@protoc_insertion_point(field_get:auth.AuthCheck.users)
  return users_.Get(index);
}
inline ::auth::AuthUser* AuthCheck::add_users() {
  // @@protoc_insertion_point(field_add:auth.AuthCheck.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::auth::AuthUser >&
AuthCheck::users() const {
  // @@protoc_insertion_point(field_list:auth.AuthCheck.users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::auth::AuthUser_System> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::AuthUser_System>() {
  return ::auth::AuthUser_System_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_visitStat_2eproto
